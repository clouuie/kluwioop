@page "/register"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation

<h1>Create an account</h1>

@if (isSignedUp)
{
    <div class="alert alert-success" role="alert">
        Signed up as @registerModel.Username
    </div>
}

@if (validationMessages?.Count > 0)
{
    <div class="alert alert-danger" role="alert">
        <ul class="mb-0">
            @foreach (var msg in validationMessages)
            {
                <li>@msg</li>
            }
        </ul>
    </div>
}

<form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true">
    <div class="mb-3">
        <label class="form-label">Username</label>
        <input class="form-control" @bind="registerModel.Username" />
        @if (fieldMessages.ContainsKey(nameof(registerModel.Username)))
        {
            <div class="text-danger">@fieldMessages[nameof(registerModel.Username)]</div>
        }
    </div>

    <div class="mb-3">
        <label class="form-label">Email</label>
        <input class="form-control" @bind="registerModel.Email" />
        @if (fieldMessages.ContainsKey(nameof(registerModel.Email)))
        {
            <div class="text-danger">@fieldMessages[nameof(registerModel.Email)]</div>
        }
    </div>

    <div class="mb-3">
        <label class="form-label">Password</label>
        <input class="form-control" type="password" @bind="registerModel.Password" />
        @if (fieldMessages.ContainsKey(nameof(registerModel.Password)))
        {
            <div class="text-danger">@fieldMessages[nameof(registerModel.Password)]</div>
        }
    </div>

    <div class="mb-3">
        <label class="form-label">Confirm Password</label>
        <input class="form-control" type="password" @bind="registerModel.ConfirmPassword" />
        @if (fieldMessages.ContainsKey(nameof(registerModel.ConfirmPassword)))
        {
            <div class="text-danger">@fieldMessages[nameof(registerModel.ConfirmPassword)]</div>
        }
    </div>

    <div class="d-flex gap-2">
        <button class="btn btn-primary" type="submit">Sign up</button>
        <a class="btn btn-secondary" href="/">Back to Login</a>
    </div>
</form>

@code {
    private RegisterModel registerModel = new();

    private bool isSignedUp;

    private List<string> validationMessages = new();
    private Dictionary<string, string> fieldMessages = new();

    private async Task HandleSubmit()
    {
        validationMessages.Clear();
        fieldMessages.Clear();

        var context = new ValidationContext(registerModel);
        var results = new List<ValidationResult>();

        // Validate data annotations first
        Validator.TryValidateObject(registerModel, context, results, validateAllProperties: true);

        // Add results to message collections
        foreach (var result in results)
        {
            if (result.MemberNames != null && result.MemberNames.Any())
            {
                foreach (var member in result.MemberNames)
                {
                    if (!fieldMessages.ContainsKey(member))
                    {
                        fieldMessages[member] = result.ErrorMessage ?? "Invalid value.";
                    }
                }
            }
            else
            {
                validationMessages.Add(result.ErrorMessage ?? "Invalid value.");
            }
        }

        // Additional check: password match
        if (string.IsNullOrEmpty(registerModel.Password) == false &&
            registerModel.Password != registerModel.ConfirmPassword)
        {
            fieldMessages[nameof(registerModel.ConfirmPassword)] = "Passwords do not match.";
        }

        if (fieldMessages.Count == 0 && validationMessages.Count == 0)
        {
            // Replace with real sign-up logic.
            isSignedUp = true;

            // After signup, route to login page (they route to each other)
            Navigation.NavigateTo("/");
        }

        await Task.CompletedTask;
    }

    private void BackToLogin() => Navigation.NavigateTo("/");

    private class RegisterModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string? Username { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string? Password { get; set; }

        [Required(ErrorMessage = "Please confirm your password")]
        public string? ConfirmPassword { get; set; }
    }
}

